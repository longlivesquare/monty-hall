{"version":3,"sources":["images/door.webp","Door.js","images/kevin.png","images/car.jpg","sounds/W.mp3","App.js","reportWebVitals.js","index.js"],"names":["Door","props","path","revealed","behindImg","doorImg","src","alt","onClick","click","number","App","useState","prizeDoor","setPrizeDoor","numDoors","selectedDoor","setSelectedDoor","hiddenDoor","setHiddenDoor","show","setShow","switched","stayed","wins","plays","stats","setStats","useEffect","randomizeDoors","randMod","Math","ceil","random","useSound","win","winner","pick","floor","chooseFirstDoor","num","chooseFinalDoor","console","log","prevStats","reset","className","Array","keys","map","car","kevin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d3653b3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/door.b10ffbc9.webp\";","import doorImg from './images/door.webp'\r\n\r\nconst Door = (props) => {\r\n    var path = !props.revealed ? doorImg : props.behindImg;\r\n    return (\r\n        <>\r\n            <img src={path} alt=\"door\" onClick={() => props.click(props.number)}></img>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Door;","export default __webpack_public_path__ + \"static/media/kevin.9a238e51.png\";","export default __webpack_public_path__ + \"static/media/car.75437ce3.jpg\";","export default __webpack_public_path__ + \"static/media/W.da8c527d.mp3\";","import { useEffect, useState } from 'react';\nimport Door from './Door';\nimport useSound from 'use-sound'\nimport kevin from './images/kevin.png'\nimport car from './images/car.jpg'\nimport win from './sounds/W.mp3'\nimport './App.css';\n\n\n\nfunction App() {\n  const [prizeDoor, setPrizeDoor] = useState(0); // Which door is the prize door\n  const [numDoors, setNumDoors] = useState(3); // Number of doors to use\n  const [selectedDoor, setSelectedDoor] = useState(-1); // Which door the contestant has selected\n  const [hiddenDoor, setHiddenDoor] = useState(-1); // The door that is not revealed when door is selected\n  const [show, setShow] = useState(0); // Show: 0- Show doors, 1-Reveal one door,2-reveal all doors\n  const [stats, setStats] = useState({switched: 0, stayed: 0, wins:0, plays:0})\n\n  useEffect(() => {\n    randomizeDoors();\n  },[])\n\n  useEffect(() => {\n    if(show === 1) {\n      if(selectedDoor !== prizeDoor) {\n        setHiddenDoor(prizeDoor)\n      }\n      else {\n        var randMod = Math.ceil(Math.random()*(numDoors-1))\n        setHiddenDoor((selectedDoor + randMod) % numDoors);\n      }\n    }\n  },[selectedDoor])\n\n  const [winner] = useSound(win);\n\n  const randomizeDoors = () => {\n    const pick = Math.floor(Math.random()*numDoors);\n    setPrizeDoor(pick);\n    setHiddenDoor(pick);\n  }\n\n  const chooseFirstDoor = (num) => {\n    setSelectedDoor(num);\n    //setHiddenDoor(handleHiddenDoor());\n    setShow(1);\n  }\n\n  const chooseFinalDoor = (num) => {\n    if (num === prizeDoor) {\n      winner();\n      if(num === selectedDoor){\n        console.log(\"Stay winner\");\n        setStats(prevStats => ({...prevStats, stayed:prevStats.stayed+1, wins:prevStats.wins+1}))  \n      }\n      else {\n        console.log(\"Switch winner\");\n        setStats(prevStats => ({...prevStats, switched:prevStats.switched+1, wins:prevStats.wins+1}))\n      }\n    }\n\n    setStats(prevStats => ({...prevStats, plays:prevStats.plays+1}))\n    setSelectedDoor(num);\n    setShow(2);\n  }\n\nconst reset = () => {\n  randomizeDoors();\n  setHiddenDoor(-1);\n  setSelectedDoor(-1);\n  setShow(0);\n}\n\n  return (\n    <div className=\"monty-hall-main\">\n      <h1>Welcome to the Monty Hall Show</h1>\n      <p>Behind one of these doors is a car. If you can correctly choose that door, you get it!</p>\n      <div className=\"doors\">\n        {[...Array(numDoors).keys()].map((number) => {\n          return(\n          <Door \n            key={number}\n            number={number}\n            click={show === 0 ? chooseFirstDoor : show === 1 ? chooseFinalDoor : reset}\n            behindImg={number === prizeDoor ? car : kevin}\n            revealed={(show === 1 && number !== hiddenDoor && number !== selectedDoor) || (show === 2)}\n          />\n          )\n        })}\n      </div>\n      {show === 1 ?<h3>The host has revealed one of the other doors after selecting. Do you want to switch?</h3> : null}\n      <button onClick={reset}>Restart</button>\n      <h2>Stats:</h2>\n      Total plays: {stats.plays}<br />\n      Total Wins: {stats.wins}<br />\n      Wins by staying: {stats.stayed}<br />\n      Wins by switching: {stats.switched}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}