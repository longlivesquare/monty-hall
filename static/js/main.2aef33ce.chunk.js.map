{"version":3,"sources":["images/door.webp","Door.js","images/kevin.png","images/car.jpg","sounds/W.mp3","App.js","reportWebVitals.js","index.js"],"names":["Door","props","src","image","alt","onClick","click","number","App","useState","prizeDoor","setPrizeDoor","numDoors","selectedDoor","setSelectedDoor","show","setShow","switched","stayed","wins","plays","stats","setStats","Array","fill","doorImg","images","setImages","forceUpdate","setValue","value","useForceUpate","useEffect","randomizeDoors","hidden","Math","ceil","random","i","kevin","useSound","win","winner","pick","floor","chooseFirstDoor","num","chooseFinalDoor","car","console","log","prevStats","reset","className","keys","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2aef33ce.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/door.b10ffbc9.webp\";","import doorImg from './images/door.webp'\r\n\r\nconst Door = (props) => {\r\n    return (\r\n        <>\r\n            <img src={props.image} alt=\"door\" onClick={() => props.click(props.number)}></img>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Door;","export default __webpack_public_path__ + \"static/media/kevin.9a238e51.png\";","export default __webpack_public_path__ + \"static/media/car.75437ce3.jpg\";","export default __webpack_public_path__ + \"static/media/W.da8c527d.mp3\";","import { useEffect, useState } from 'react';\nimport Door from './Door';\nimport useSound from 'use-sound'\nimport doorImg from './images/door.webp'\nimport kevin from './images/kevin.png'\nimport car from './images/car.jpg'\nimport win from './sounds/W.mp3'\nimport './App.css';\n\nfunction useForceUpate(){\n  const [value, setValue] = useState(0);\n  return() => setValue(value => value+1);\n}\n\nfunction App() {\n  const [prizeDoor, setPrizeDoor] = useState(0); // Which door is the prize door\n  const [numDoors, setNumDoors] = useState(3); // Number of doors to use\n  const [selectedDoor, setSelectedDoor] = useState(-1); // Which door the contestant has selected\n  //const [hiddenDoor, setHiddenDoor] = useState(-1); // The door that is not revealed when door is selected\n  const [show, setShow] = useState(0); // Show: 0- Show doors, 1-Reveal one door,2-reveal all doors\n  const [stats, setStats] = useState({switched: 0, stayed: 0, wins:0, plays:0})\n  const [images, setImages] = useState(Array(numDoors).fill(doorImg))\n  const forceUpdate = useForceUpate();\n\n  useEffect(() => {\n    randomizeDoors();\n  },[])\n\n  useEffect(() => {\n    if(show === 1) {\n      var hidden = selectedDoor === prizeDoor ? ((selectedDoor + Math.ceil(Math.random()*(numDoors-1))) % numDoors) : prizeDoor;\n      for (var i = 0; i < numDoors; i++) {\n        if (i !== hidden && i !== prizeDoor && i !== selectedDoor) {\n          images[i] = kevin;\n        }\n      }\n      forceUpdate();\n    }\n  }, [show])\n\n  const [winner] = useSound(win);\n\n  const randomizeDoors = () => {\n    const pick = Math.floor(Math.random()*numDoors);\n    setPrizeDoor(pick);\n  }\n\n  const chooseFirstDoor = (num) => {\n    setSelectedDoor(num);\n    //setHiddenDoor(handleHiddenDoor());\n    setShow(1);\n  }\n\n  const chooseFinalDoor = (num) => {\n    for(var i = 0; i < numDoors; i++) {\n      if (i=== prizeDoor) {\n        images[i] = car;\n      } else {\n        images[i] = kevin;\n      }\n    }\n    if (num === prizeDoor) {\n      winner();\n      if(num === selectedDoor){\n        console.log(\"Stay winner\");\n        setStats(prevStats => ({...prevStats, stayed:prevStats.stayed+1, wins:prevStats.wins+1}))  \n      }\n      else {\n        console.log(\"Switch winner\");\n        setStats(prevStats => ({...prevStats, switched:prevStats.switched+1, wins:prevStats.wins+1}))\n      }\n    }\n\n    setStats(prevStats => ({...prevStats, plays:prevStats.plays+1}))\n    setSelectedDoor(num);\n    setShow(2);\n  }\n\nconst reset = () => {\n  randomizeDoors();\n  //setHiddenDoor(-1);\n  setImages(Array(numDoors).fill(doorImg))\n  setSelectedDoor(-1);\n  setShow(0);\n}\n\n  return (\n    <div className=\"monty-hall-main\">\n      <h1>Welcome to the Monty Hall Show</h1>\n      <p>Behind one of these doors is a car. If you can correctly choose that door, you get it!</p>\n      <div className=\"doors\">\n        {[...Array(numDoors).keys()].map((number) => {\n          return(\n          <Door \n            key={number}\n            number={number}\n            image={images[number]}\n            click={show === 0 ? chooseFirstDoor : show === 1 ? chooseFinalDoor : reset}\n          />\n          )\n        })}\n      </div>\n      {show === 1 ?<h3>The host has revealed one of the other doors after selecting. Do you want to switch?</h3> : null}\n      <button onClick={reset}>Restart</button>\n      <h2>Stats:</h2>\n      Total plays: {stats.plays}<br />\n      Total Wins: {stats.wins}<br />\n      Wins by staying: {stats.stayed}<br />\n      Wins by switching: {stats.switched}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}